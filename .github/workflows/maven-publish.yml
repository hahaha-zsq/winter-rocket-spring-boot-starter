name: Publish to Maven Central  # 发布到 Maven 中央仓库的工作流名称

on:
  push:
    tags:
      - 'v*'   # 只有推送带有 v 前缀的标签时才触发此工作流（如 v1.0.0）

jobs:
  publish:  # 定义一个名为 publish 的作业
    runs-on: ubuntu-latest  # 在最新版本的 Ubuntu 运行环境中执行

    steps:
      - name: Checkout code  # 检出代码
        uses: actions/checkout@v4  # 使用官方的 checkout action v4 版本
      - name: Set up JDK 1.8  # 设置 Java 开发环境
        uses: actions/setup-java@v4  # 使用官方的 setup-java action v4 版本
        with:
          distribution: 'temurin'  # 使用 Eclipse Temurin 发行版的 JDK
          java-version: '8'  # 指定 Java 版本为 8
          cache: 'maven'  # 启用 Maven 缓存以加速构建
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}  # 从 GitHub 仓库密钥中获取 GPG 私钥
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}  # 从 GitHub 仓库密钥中获取 GPG 密码

      - name: Import GPG key  # 导入 GPG 密钥用于签名
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
      - name: Configure Maven settings.xml  # 配置 Maven 设置文件
        run: |
          mkdir -p ~/.m2  
          cat > ~/.m2/settings.xml <<EOF  
          <settings>
            <servers>
              <server>
                <id>dadandiaoming-maven</id>  
                <username>${{ secrets.OSSRH_USERNAME }}</username>  
                <password>${{ secrets.OSSRH_PASSWORD }}</password> 
              </server>
            </servers>
          </settings>
          EOF

      - name: Build and Publish  # 构建项目并发布到 Maven 中央仓库
        run: |
          GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)
          echo "Using GPG key: $GPG_KEY_ID"
          mvn clean deploy -Dgpg.keyname=$GPG_KEY_ID -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }} -DskipTests
